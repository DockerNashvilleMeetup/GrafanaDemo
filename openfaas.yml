version: "3.4"

networks:
  monitoring:
    external: true
  func_functions:
    external: true

services:
  gateway:
    ports:
    - 8080:8080
    image: functions/gateway:0.7.0
    networks:
    - func_functions
    - monitoring
    environment:
      functions_provider_url: "http://faas-swarm:8080/"
      read_timeout:  10   # set both here, and on your functions
      write_timeout: 10   # set both here, and on your functions
      dnsrr: "true"  # Temporarily use dnsrr in place of VIP while issue persists on PWD
      faas_nats_address: "nats"
      faas_nats_port: 4222
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
        - 'node.platform.os == linux'

  # Docker Swarm provider
  faas-swarm:
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
    image:  functions/faas-swarm:0.1.5
    networks:
    - func_functions
    environment:
      read_timeout:  10   # set both here, and on your functions
      write_timeout: 10   # set both here, and on your functions
      DOCKER_API_VERSION: "1.30"
    deploy:
      placement:
        constraints:
        - 'node.role == manager'
        - 'node.platform.os == linux'
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s

  nats:
    image: nats-streaming:0.6.0
    # Uncomment the following port mappings if you wish to expose the 
    # NATS client and/or management ports
    # ports:
    #     - 4222:4222
    #     - 8222:8222
    command: "--store memory --cluster_id faas-cluster"
    networks:
    - func_functions
    deploy:
      resources:
        limits:
          memory: 125M
        reservations:
          memory: 50M
      placement:
        constraints:
        - 'node.platform.os == linux'

  queue-worker:
    image: functions/queue-worker:0.4
    networks:
    - func_functions
    environment:
      max_inflight: "1"
      ack_timeout: "30s"    # Max duration of any async task / request
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
        - 'node.platform.os == linux'

  # Pass a username as an argument to find how many images user has pushed to Docker Hub.
  hubstats:
    image: functions/hubstats:latest
    labels:
      function: "true"
    networks:
    - func_functions
    environment:
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
        - 'node.platform.os == linux'

  # Node.js gives OS info about the node (Host)
  nodeinfo:
    image: functions/nodeinfo:latest
    labels:
      function: "true"
    networks:
    - func_functions
    environment:
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
        - 'node.platform.os == linux'


  # Uses `cat` to echo back response, fastest function to execute.
  echoit:
    image: functions/alpine:latest
    labels:
      function: "true"
    networks:
    - func_functions
    environment:
      fprocess: "cat"
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
        - 'node.platform.os == linux'


  # Counts words in request with `wc` utility
  wordcount:
    image: functions/alpine:latest
    labels:
      function: "true"
      com.faas.max_replicas: "10"
    networks:
    - func_functions
    environment:
      fprocess: "wc"
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
        - 'node.platform.os == linux'


  # Calculates base64 representation of request body.
  base64:
    image: functions/alpine:latest
    labels:
      function: "true"
    networks:
    - func_functions
    environment:
      fprocess: "base64"
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
        - 'node.platform.os == linux'

  # Converts body in (markdown format) -> (html)
  markdown:
    image: functions/markdown-render:latest
    labels:
      function: "true"
    networks:
    - func_functions
    environment:
      no_proxy: "gateway"
      https_proxy: $https_proxy
    deploy:
      placement:
        constraints:
        - 'node.platform.os == linux'

